generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Class {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  teacherEmail String       @db.VarChar(255)
  teacher      User         @relation(fields: [teacherEmail], references: [email])
  discussions  Discussion[]
  students     User[]       @relation("ClassStudents")
}

model Discussion {
  id          Int        @id @default(autoincrement())
  classId     Int
  description String
  name        String     @db.VarChar(255)
  Class       Class      @relation(fields: [classId], references: [id])
  Response    Response[]
}

model Response {
  id           Int         @id @default(autoincrement())
  userEmail    String      @db.VarChar(255)
  content      String
  discussionId Int?
  parentId     Int?
  Discussion   Discussion? @relation(fields: [discussionId], references: [id])
  parent       Response?   @relation("ResponseToResponse_parentId", fields: [parentId], references: [id])
  User         User        @relation(fields: [userEmail], references: [email])
  responses    Response[]  @relation("ResponseToResponse_parentId")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  classes         Class[]    @relation("ClassStudents")
  teachingClasses Class[]
  responses       Response[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
